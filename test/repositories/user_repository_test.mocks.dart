// Mocks generated by Mockito 5.2.0 from annotations
// in ftc_forum/test/repositories/user_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;
import 'dart:typed_data' as _i9;

import 'package:cloud_firestore/cloud_firestore.dart' as _i3;
import 'package:firebase_core/firebase_core.dart' as _i4;
import 'package:ftc_forum/models/models.dart' as _i2;
import 'package:ftc_forum/models/question.dart' as _i7;
import 'package:ftc_forum/models/reply.dart' as _i8;
import 'package:ftc_forum/repositories/user_repository.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeUser_0 extends _i1.Fake implements _i2.User {}

class _FakeDocumentSnapshot_1<T extends Object?> extends _i1.Fake
    implements _i3.DocumentSnapshot<T> {}

class _FakeFirebaseApp_2 extends _i1.Fake implements _i4.FirebaseApp {}

class _FakeSettings_3 extends _i1.Fake implements _i3.Settings {}

class _FakeCollectionReference_4<T extends Object?> extends _i1.Fake
    implements _i3.CollectionReference<T> {}

class _FakeWriteBatch_5 extends _i1.Fake implements _i3.WriteBatch {}

class _FakeLoadBundleTask_6 extends _i1.Fake implements _i3.LoadBundleTask {}

class _FakeQuerySnapshot_7<T extends Object?> extends _i1.Fake
    implements _i3.QuerySnapshot<T> {}

class _FakeQuery_8<T extends Object?> extends _i1.Fake implements _i3.Query<T> {
}

class _FakeDocumentReference_9<T extends Object?> extends _i1.Fake
    implements _i3.DocumentReference<T> {}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i5.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.User get currentUser =>
      (super.noSuchMethod(Invocation.getter(#currentUser),
          returnValue: _FakeUser_0()) as _i2.User);
  @override
  set currentUser(_i2.User? _currentUser) =>
      super.noSuchMethod(Invocation.setter(#currentUser, _currentUser),
          returnValueForMissingStub: null);
  @override
  _i6.Stream<_i3.DocumentSnapshot<Map<String, dynamic>>> fetchUserProfile(
          String? uid) =>
      (super.noSuchMethod(Invocation.method(#fetchUserProfile, [uid]),
              returnValue:
                  Stream<_i3.DocumentSnapshot<Map<String, dynamic>>>.empty())
          as _i6.Stream<_i3.DocumentSnapshot<Map<String, dynamic>>>);
  @override
  _i6.Stream<_i3.QuerySnapshot<Map<String, dynamic>>> fetchCategories() =>
      (super.noSuchMethod(Invocation.method(#fetchCategories, []),
              returnValue:
                  Stream<_i3.QuerySnapshot<Map<String, dynamic>>>.empty())
          as _i6.Stream<_i3.QuerySnapshot<Map<String, dynamic>>>);
  @override
  _i6.Stream<_i3.QuerySnapshot<Map<String, dynamic>>> fetchSections() =>
      (super.noSuchMethod(Invocation.method(#fetchSections, []),
              returnValue:
                  Stream<_i3.QuerySnapshot<Map<String, dynamic>>>.empty())
          as _i6.Stream<_i3.QuerySnapshot<Map<String, dynamic>>>);
  @override
  _i6.Stream<_i3.QuerySnapshot<Map<String, dynamic>>> fetchQuestions() =>
      (super.noSuchMethod(Invocation.method(#fetchQuestions, []),
              returnValue:
                  Stream<_i3.QuerySnapshot<Map<String, dynamic>>>.empty())
          as _i6.Stream<_i3.QuerySnapshot<Map<String, dynamic>>>);
  @override
  _i6.Stream<_i3.QuerySnapshot<Map<String, dynamic>>> fetchSectionsByCategoryId(
          String? id) =>
      (super.noSuchMethod(Invocation.method(#fetchSectionsByCategoryId, [id]),
              returnValue:
                  Stream<_i3.QuerySnapshot<Map<String, dynamic>>>.empty())
          as _i6.Stream<_i3.QuerySnapshot<Map<String, dynamic>>>);
  @override
  _i6.Stream<_i3.QuerySnapshot<Map<String, dynamic>>>
      fetchTotalQuestionsByUserId(String? uid) => (super.noSuchMethod(
              Invocation.method(#fetchTotalQuestionsByUserId, [uid]),
              returnValue:
                  Stream<_i3.QuerySnapshot<Map<String, dynamic>>>.empty())
          as _i6.Stream<_i3.QuerySnapshot<Map<String, dynamic>>>);
  @override
  _i6.Future<_i3.DocumentSnapshot<Map<String, dynamic>>> fetchCategoryById(
          String? id) =>
      (super.noSuchMethod(Invocation.method(#fetchCategoryById, [id]),
          returnValue: Future<_i3.DocumentSnapshot<Map<String, dynamic>>>.value(
              _FakeDocumentSnapshot_1<Map<String, dynamic>>())) as _i6
          .Future<_i3.DocumentSnapshot<Map<String, dynamic>>>);
  @override
  _i6.Stream<_i3.QuerySnapshot<Map<String, dynamic>>> fetchQuestionsBySectionId(
          String? id) =>
      (super.noSuchMethod(Invocation.method(#fetchQuestionsBySectionId, [id]),
              returnValue:
                  Stream<_i3.QuerySnapshot<Map<String, dynamic>>>.empty())
          as _i6.Stream<_i3.QuerySnapshot<Map<String, dynamic>>>);
  @override
  _i6.Stream<_i3.DocumentSnapshot<Map<String, dynamic>>> fetchSectionById(
          String? id) =>
      (super.noSuchMethod(Invocation.method(#fetchSectionById, [id]),
              returnValue:
                  Stream<_i3.DocumentSnapshot<Map<String, dynamic>>>.empty())
          as _i6.Stream<_i3.DocumentSnapshot<Map<String, dynamic>>>);
  @override
  _i6.Stream<_i3.QuerySnapshot<Map<String, dynamic>>>
      fetchSectionsByCategoriesId(String? id) => (super.noSuchMethod(
              Invocation.method(#fetchSectionsByCategoriesId, [id]),
              returnValue:
                  Stream<_i3.QuerySnapshot<Map<String, dynamic>>>.empty())
          as _i6.Stream<_i3.QuerySnapshot<Map<String, dynamic>>>);
  @override
  _i6.Stream<_i3.QuerySnapshot<Map<String, dynamic>>> fetchRepliesOfQuestion(
          String? id) =>
      (super.noSuchMethod(Invocation.method(#fetchRepliesOfQuestion, [id]),
              returnValue:
                  Stream<_i3.QuerySnapshot<Map<String, dynamic>>>.empty())
          as _i6.Stream<_i3.QuerySnapshot<Map<String, dynamic>>>);
  @override
  _i6.Future<void> createQuestion({_i7.Question? question}) =>
      (super.noSuchMethod(
          Invocation.method(#createQuestion, [], {#question: question}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> updatePostQuestion({_i7.Question? question}) =>
      (super.noSuchMethod(
          Invocation.method(#updatePostQuestion, [], {#question: question}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> createReply({_i8.Reply? reply}) =>
      (super.noSuchMethod(Invocation.method(#createReply, [], {#reply: reply}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> updateReply({_i8.Reply? reply}) =>
      (super.noSuchMethod(Invocation.method(#updateReply, [], {#reply: reply}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> deleteComment({String? id, String? qid}) => (super
      .noSuchMethod(Invocation.method(#deleteComment, [], {#id: id, #qid: qid}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> upvoteQuestion(
          {String? questionId, int? updatedVote, String? uid}) =>
      (super.noSuchMethod(
          Invocation.method(#upvoteQuestion, [],
              {#questionId: questionId, #updatedVote: updatedVote, #uid: uid}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> deleteQuestion({String? questionId}) => (super.noSuchMethod(
      Invocation.method(#deleteQuestion, [], {#questionId: questionId}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> downvoteQuestion(
          {String? questionId, int? updatedVote, String? uid}) =>
      (super.noSuchMethod(
          Invocation.method(#downvoteQuestion, [],
              {#questionId: questionId, #updatedVote: updatedVote, #uid: uid}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> upvoteReply(
          {String? replyId, int? updatedVote, String? uid}) =>
      (super.noSuchMethod(
          Invocation.method(#upvoteReply, [],
              {#replyId: replyId, #updatedVote: updatedVote, #uid: uid}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> decreaseUpvoteReply(
          {String? replyId, int? updatedVote, String? uid}) =>
      (super.noSuchMethod(
          Invocation.method(#decreaseUpvoteReply, [],
              {#replyId: replyId, #updatedVote: updatedVote, #uid: uid}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> decreaseUpvoteQuestion(
          {String? questionId, int? updatedVote, String? uid}) =>
      (super.noSuchMethod(
          Invocation.method(#decreaseUpvoteQuestion, [],
              {#questionId: questionId, #updatedVote: updatedVote, #uid: uid}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> downvoteReply(
          {String? replyId, int? updatedVote, String? uid}) =>
      (super.noSuchMethod(
          Invocation.method(#downvoteReply, [],
              {#replyId: replyId, #updatedVote: updatedVote, #uid: uid}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> decreaseDownvoteReply(
          {String? replyId, int? updatedVote, String? uid}) =>
      (super.noSuchMethod(
          Invocation.method(#decreaseDownvoteReply, [],
              {#replyId: replyId, #updatedVote: updatedVote, #uid: uid}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> decreaseDownvoteQuestion(
          {String? questionId, int? updatedVote, String? uid}) =>
      (super.noSuchMethod(
          Invocation.method(#decreaseDownvoteQuestion, [],
              {#questionId: questionId, #updatedVote: updatedVote, #uid: uid}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<int> getQuestionUpvotes(String? questionId) =>
      (super.noSuchMethod(Invocation.method(#getQuestionUpvotes, [questionId]),
          returnValue: Future<int>.value(0)) as _i6.Future<int>);
  @override
  _i6.Future<int> getQuestionDownvotes(String? questionId) => (super
      .noSuchMethod(Invocation.method(#getQuestionDownvotes, [questionId]),
          returnValue: Future<int>.value(0)) as _i6.Future<int>);
  @override
  _i6.Future<int> getReplyUpvotes(String? replyId) =>
      (super.noSuchMethod(Invocation.method(#getReplyUpvotes, [replyId]),
          returnValue: Future<int>.value(0)) as _i6.Future<int>);
  @override
  _i6.Future<int> getReplyDownvotes(String? replyId) =>
      (super.noSuchMethod(Invocation.method(#getReplyDownvotes, [replyId]),
          returnValue: Future<int>.value(0)) as _i6.Future<int>);
  @override
  _i6.Future<_i2.User> fetchUserById(String? id) =>
      (super.noSuchMethod(Invocation.method(#fetchUserById, [id]),
              returnValue: Future<_i2.User>.value(_FakeUser_0()))
          as _i6.Future<_i2.User>);
  @override
  _i6.Future<String> uploadImage({String? id, String? name}) => (super
      .noSuchMethod(Invocation.method(#uploadImage, [], {#id: id, #name: name}),
          returnValue: Future<String>.value('')) as _i6.Future<String>);
  @override
  _i6.Future<void> updateProfileImageUrl({String? uid, String? imageUrl}) =>
      (super.noSuchMethod(
          Invocation.method(
              #updateProfileImageUrl, [], {#uid: uid, #imageUrl: imageUrl}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  String getRandString(int? len) =>
      (super.noSuchMethod(Invocation.method(#getRandString, [len]),
          returnValue: '') as String);
}

/// A class which mocks [FirebaseFirestore].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseFirestore extends _i1.Mock implements _i3.FirebaseFirestore {
  MockFirebaseFirestore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.FirebaseApp get app => (super.noSuchMethod(Invocation.getter(#app),
      returnValue: _FakeFirebaseApp_2()) as _i4.FirebaseApp);
  @override
  set app(_i4.FirebaseApp? _app) =>
      super.noSuchMethod(Invocation.setter(#app, _app),
          returnValueForMissingStub: null);
  @override
  set settings(_i3.Settings? settings) =>
      super.noSuchMethod(Invocation.setter(#settings, settings),
          returnValueForMissingStub: null);
  @override
  _i3.Settings get settings => (super.noSuchMethod(Invocation.getter(#settings),
      returnValue: _FakeSettings_3()) as _i3.Settings);
  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(Invocation.getter(#pluginConstants),
          returnValue: <dynamic, dynamic>{}) as Map<dynamic, dynamic>);
  @override
  _i3.CollectionReference<Map<String, dynamic>> collection(
          String? collectionPath) =>
      (super.noSuchMethod(Invocation.method(#collection, [collectionPath]),
              returnValue: _FakeCollectionReference_4<Map<String, dynamic>>())
          as _i3.CollectionReference<Map<String, dynamic>>);
  @override
  _i3.WriteBatch batch() => (super.noSuchMethod(Invocation.method(#batch, []),
      returnValue: _FakeWriteBatch_5()) as _i3.WriteBatch);
  @override
  _i6.Future<void> clearPersistence() =>
      (super.noSuchMethod(Invocation.method(#clearPersistence, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> enablePersistence(
          [_i3.PersistenceSettings? persistenceSettings]) =>
      (super.noSuchMethod(
          Invocation.method(#enablePersistence, [persistenceSettings]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i3.LoadBundleTask loadBundle(_i9.Uint8List? bundle) =>
      (super.noSuchMethod(Invocation.method(#loadBundle, [bundle]),
          returnValue: _FakeLoadBundleTask_6()) as _i3.LoadBundleTask);
  @override
  void useFirestoreEmulator(String? host, int? port,
          {bool? sslEnabled = false}) =>
      super.noSuchMethod(
          Invocation.method(
              #useFirestoreEmulator, [host, port], {#sslEnabled: sslEnabled}),
          returnValueForMissingStub: null);
  @override
  _i6.Future<_i3.QuerySnapshot<Map<String, dynamic>>> namedQueryGet(
          String? name,
          {_i3.GetOptions? options = const _i3.GetOptions()}) =>
      (super.noSuchMethod(
          Invocation.method(#namedQueryGet, [name], {#options: options}),
          returnValue: Future<_i3.QuerySnapshot<Map<String, dynamic>>>.value(
              _FakeQuerySnapshot_7<Map<String, dynamic>>())) as _i6
          .Future<_i3.QuerySnapshot<Map<String, dynamic>>>);
  @override
  _i3.Query<Map<String, dynamic>> collectionGroup(String? collectionPath) =>
      (super.noSuchMethod(Invocation.method(#collectionGroup, [collectionPath]),
              returnValue: _FakeQuery_8<Map<String, dynamic>>())
          as _i3.Query<Map<String, dynamic>>);
  @override
  _i6.Future<void> disableNetwork() =>
      (super.noSuchMethod(Invocation.method(#disableNetwork, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i3.DocumentReference<Map<String, dynamic>> doc(String? documentPath) =>
      (super.noSuchMethod(Invocation.method(#doc, [documentPath]),
              returnValue: _FakeDocumentReference_9<Map<String, dynamic>>())
          as _i3.DocumentReference<Map<String, dynamic>>);
  @override
  _i6.Future<void> enableNetwork() =>
      (super.noSuchMethod(Invocation.method(#enableNetwork, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Stream<void> snapshotsInSync() =>
      (super.noSuchMethod(Invocation.method(#snapshotsInSync, []),
          returnValue: Stream<void>.empty()) as _i6.Stream<void>);
  @override
  _i6.Future<T> runTransaction<T>(_i3.TransactionHandler<T>? transactionHandler,
          {Duration? timeout = const Duration(seconds: 30)}) =>
      (super.noSuchMethod(
          Invocation.method(
              #runTransaction, [transactionHandler], {#timeout: timeout}),
          returnValue: Future<T>.value(null)) as _i6.Future<T>);
  @override
  _i6.Future<void> terminate() =>
      (super.noSuchMethod(Invocation.method(#terminate, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> waitForPendingWrites() =>
      (super.noSuchMethod(Invocation.method(#waitForPendingWrites, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
}
